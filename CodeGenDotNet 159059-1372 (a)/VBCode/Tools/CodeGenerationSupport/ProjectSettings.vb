' ====================================================================
'  Copyright ©2004, Kathleen Dollard, All Rights Reserved.
' ====================================================================
'   I'm distributing this code so you'll be able to use it to see code
'   generation in action and I hope it will be useful and you'll enjoy 
'   using it. This code is provided "AS IS" without warranty, either 
'   expressed or implied, including implied warranties of merchantability 
'   and/or fitness for a particular purpose. 
' ====================================================================
'  Summary: Currently unused code that could be reused to isolate project settings. This proved to complex for most scenarios in testing.

Option Strict On
Option Explicit On 

Imports System

Public Class ProjectSettings
   Inherits SettingsBase
   'NOTE: I used get functions rather than readonly properties with 
   '      parameters because I planned to convert this code to C#

   ' NOTE: maintaining the project settings was too much trouble for most project. 
   '       you can alter this to provide support for those files again.
   Const localNspaceName As String = "http://kadgen.com/KADGenProjectSettings.xsd"

   Protected Friend Overrides Property Node() As System.Xml.XmlNode
      Get
         Return MyBase.Node
      End Get
      Set(ByVal Value As System.Xml.XmlNode)
         MyBase.Node = Value
         mNsmgr.AddNamespace("kp", localNspaceName)
      End Set
   End Property

   Protected Friend Function GetNamespacePrefix() As String
      If mnode Is Nothing Then
         Return "kp"
      Else
         Dim elem As Xml.XmlNode
         elem = mNode.SelectSingleNode("kp:Namespace", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, "Prefix")
      End If
   End Function

   Protected Friend Function GetCommentStart(ByVal language As String) As String
      If mnode Is Nothing Then
         ' I deliberately left this case sensitive to ease later transition to a project file
         Select Case language
            Case "VB"
               Return "' "
            Case "CSharp"
               Return "/* "
            Case "XML"
               Return "<!-- "
            Case "StoredProc"
               Return "/* "
         End Select
      Else
         Dim elem As Xml.XmlNode
         elem = mNode.SelectSingleNode("kp:CommentCharacters/kp:CharacterSet[@Language='" & language & "']", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, "Start")
      End If
   End Function

   Protected Friend Function GetCommentEnd(ByVal language As String) As String
      If mnode Is Nothing Then
         Select Case language
            Case "VB"
               Return ""
            Case "CSharp"
               Return " */ "
            Case "XML"
               Return " -->"
            Case "StoredProc"
               Return " */"
         End Select
      Else
         Dim elem As Xml.XmlNode
         elem = mNode.SelectSingleNode("kp:CommentCharacters/kp:CharacterSet[@Language='" & language & "']", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, "End")
      End If
   End Function

   Protected Friend Function GetCommentText(ByVal genType As String) As String
      If mnode Is Nothing Then
         Select Case genType
            Case "GenOnceMessage"
               Return "This file is only generated if missing. Delete the file to force regeneration."
            Case "GenUntilEditedMessage"
               Return "This file is regenerated until its edited. Delete to force regeneration."
            Case "GenAlwaysMessage"
               Return "This file autogenerated - DO NOT EDIT THIS FILE"
            Case "GenNeverMessage"
               Return "Add an intelligent message if you figure out a way to use this"
            Case "GenOverwriteMessage"
               Return "This file will be overwritten – DO NOT EDIT THIS FILE – YOUR EDITS WILL BE LOST"
         End Select
      Else
         Dim elem As Xml.XmlNode
         Dim cultureName As String = Globalization.CultureInfo.CurrentCulture.Name
         elem = mNode.SelectSingleNode("kp:Messages/" & genType & "Message", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, cultureName)
      End If
   End Function

   Protected Friend Function GetCommentStart(ByVal language As Utility.OutputType) As String
      Return GetCommentStart(language.ToString)
   End Function

   Protected Friend Function GetCommentEnd(ByVal language As Utility.OutputType) As String
      Return GetCommentEnd(language.ToString)
   End Function

   Protected Friend Function GetCommentText(ByVal genType As Utility.GenType) As String
      Return GetCommentText(genType.ToString)
   End Function

   Protected Friend Function GetHashExplanation() As String
      If mnode Is Nothing Then
         Return "This funny number is a hash, dont change it"
      Else
         Dim elem As Xml.XmlNode
         elem = mNode.SelectSingleNode("kp:HashSettings", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, "HashExplanation")
      End If
   End Function

   Protected Friend Function GetHashMarker() As String
      If mnode Is Nothing Then
         Return "%%%###%%%"
      Else
         Dim elem As Xml.XmlNode
         elem = mNode.SelectSingleNode("kp:HashSettings", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, "HashMarker")
      End If
   End Function

   Protected Friend Function GetHeaderMarker() As String
      If mnode Is Nothing Then
         Return "***^^^***|||***^^^***"
      Else
         Dim elem As Xml.XmlNode
         elem = mNode.SelectSingleNode("kp:HashSettings", mNsmgr)
         Return Utility.Tools.GetAttributeOrEmpty(elem, "HeaderMarker")
      End If
   End Function

End Class
